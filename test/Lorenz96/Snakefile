import sys
import subprocess
from snakemake.utils import R

def execcommand(cmd,stdout,stderr,input=""):
    with open(stdout, "w") as outf:
        with open (stderr, "w") as errf:
            o,e = subprocess.Popen(cmd, shell=True, stdout=outf, stderr=errf, universal_newlines=True).communicate(input)
            errf.close()
        outf.close()
    return o,e

replicates = [str(2**i) for i in range(8)]
dims = [str(i) for i in range(1,8)]
ite = [str(i) for i in range(1,51)]

rule all:
    input:
        # expand('results/replicate/plots/{b}.pdf', b=dims),
        # 'results/replicate/plots/RMSE.pdf'
        # expand('result/replicate/iter_plots/{b}.pdf', b=dims)
        expand('result/replicate/boxplots/{b}.pdf', b=dims),
        expand('result/replicate/CI_plots/{b}.pdf', b=dims),
        expand('result/replicate/CI_line_plots/{b}.pdf', b=dims),
        expand('result/replicate/CI_line_ylinear_plots/{b}.pdf', b=dims)
        # 'results/replicate/RMSE_total.tsv',
        # 'results/replicate/CI_total.tsv'
        # expand('results/replicate/CI/{param}.tsv', param=replicates)

rule build:
    params:
        1
    input:
        'replicate_ccompile_each.jl'
    output:
        'builddir/replicate_ccompile_each',
        'builddir/replicate_ccompile_each.so',
        'builddir/replicate_ccompile_each.o'
    shell:
        "julia ~/.julia/v0.6/PackageCompiler/juliac.jl -vae replicate_ccompile_each.jl"

# rulename should not be begin by numbers
# rule replicate:
#     params:
#         3
#     output:
#         'results/replicate_{a}/RMSE',
#         ['results/replicate_{a}/' + b + '.tsv' for b in dims]
#     log:
#         'log/replicate/replicate/{a}'
#     run:
#         execcommand(expand('./builddir/replicate_ccompile {n}', n={wildcards.a}), output[0], log[0])

# rule replicate_iter:
#     params:
#         3
#     output:
#         'result/replicate_{a}/RMSE',
#         ['result/replicate_{a}/iter_' + b + '/' + c + '.tsv' for c in dims for b in ite]
#     log:
#         'log/replicate/replicate/{a}'
#     run:
#         execcommand(expand('./builddir/replicate_ccompile_iter {n}', n={wildcards.a}), output[0], log[0])

# rule replicate_each:
#     params:
#         2
#     input:
#         'builddir/replicate_ccompile_each'
#     output:
#         'result/replicate_{a}/iter_{b}/RMSE',
#         ['result/replicate_{a}/iter_{b}/' + c + '.tsv' for c in dims]
#     log:
#         'log/replicate/replicate_{a}/iter_{b}'
#     run:
#         execcommand(expand('./builddir/replicate_ccompile_each {a} {b}', a={wildcards.a}, b={wildcards.b}), output[0], log[0])

rule replicate_each:
    params:
        1
    input:
        'builddir/replicate_ccompile_each'
    output:
        ['result/replicate_' + a + '/iter_' + b + '/RMSE' for b in ite for a in replicates],
        ['result/replicate_' + a + '/iter_' + b + '/' + c + '.tsv' for c in dims for b in ite for a in replicates]
    log:
        ['log/replicate/replicate_' + a + '/iter_' + b for b in ite for a in replicates]
    shell:
        "qsub -sync y -t 1-400:1 array_qsub.sh"

# rule replicate_each_replicate:
#     params:
#         1
#     input:
#         'builddir/replicate_ccompile_each'
#     output:
#         ['result/replicate_{a}/iter_' + b + '/RMSE' for b in ite],
#         ['result/replicate_{a}/iter_' + b + '/' + c + '.tsv' for c in dims for b in ite]
#     log:
#         ['log/replicate/replicate_{a}/iter_' + b for b in ite]
#     shell:
#         "qsub -sync y -t 1-50:1 array_qsub_replicate.sh {wildcards.a}"
#         # import subprocess
#         # subprocess.run(["qsub -sync y -t 1-50:1 array_qsub_replicate.sh", expand('{a}', b={wildcards.a})[0]])

# rule RMSE_totaling:
#     params:
#         1
#     input:
#         expand('results/replicate_{param}/RMSE', param=replicates)
#     output:
#         'results/replicate/RMSE_total.tsv'
#     log:
#         'log/replicate/RMSE'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate_' + i + '/RMSE', 'r') as infile:
#                     outf.write("%s\t%s\n" % (i, infile.readline().rstrip('\n')))
#                 infile.close()
#             outf.close()

# rule totaling:
#     params:
#         1
#     input:
#         ['results/replicate_'+ a + '/{b}.tsv' for a in replicates]
#     output:
#         'results/replicate/{b}.tsv'
#     log:
#         'log/replicate/dims/{b}'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate_' + i + '/' + expand('{b}', b={wildcards.b})[0] + '.tsv', 'r') as infile:
#                     outf.write("%s\t%s" % (i, infile.readline()))
#                 infile.close()
#             outf.close()

# rule totaling_iter:
#     params:
#         1
#     input:
#         ['result/replicate_{a}/iter_' + it + '/{b}.tsv' for it in ite]
#     output:
#         'result/replicate_{a}/{b}.tsv'
#     log:
#         'log/replicate_{a}/dims/{b}'
#     run:
#         execcommand(expand("""
#         cat result/replicate_{a}/iter_*/{b}.tsv | sed "s/^/{a}$(printf '\t')/g"
#         """, a={wildcards.a}, b={wildcards.b}), output[0], log[0])
#
# rule totaling_replicate:
#     params:
#         1
#     input:
#         ['result/replicate_' + a + '/{b}.tsv' for a in replicates]
#     output:
#         'result/replicate/{b}.tsv'
#     log:
#         'log/replicate/dims/{b}'
#     run:
#         execcommand(expand("cat result/replicate_*/{b}.tsv", b={wildcards.b}), output[0], log[0])

rule totaling_replicate:
    params:
        1
    input:
        ['result/replicate_' + a + '/iter_' + it + '/{b}.tsv' for a in replicates for it in ite]
    output:
        'result/replicate/{b}.tsv'
    log:
        'log/replicate/dims/{b}'
    run:
        with open(output[0],'w') as outf:
            outf.write("replicates\tdiff\tCI\n")
            for i in replicates:
                for j in ite:
                    with open('result/replicate_' + i + '/iter_' + j + expand('/{b}', b={wildcards.b})[0] + '.tsv', 'r') as infile:
                        outf.write('%s\t%s\n' % (i, infile.readline().rstrip('\n')))
                        infile.close()
            outf.close()

# rule diff_totaling:
#     params:
#         1
#     input:
#         expand('results/replicate/diff/{param}.tsv', param=replicates)
#     output:
#         'results/replicate/diff_total.tsv'
#     log:
#         'log/replicate/stderr_diff'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate/diff/' + i + '.tsv', 'r') as infile:
#                     outf.write("%s\t%s\n" % (i, infile.readline().rstrip('\n')))
#                 infile.close()
#             outf.close()
#
# rule CI_totaling:
#     params:
#         1
#     input:
#         expand('results/replicate/CI/{param}.tsv', param=replicates)
#     output:
#         'results/replicate/CI_total.tsv'
#     log:
#         'log/replicate/stderr_CI'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate/CI/' + i + '.tsv', 'r') as infile:
#                     outf.write("%s\t%s\n" % (i, infile.readline().rstrip('\n')))
#                 infile.close()
#             outf.close()

rule RMSE_plot:
    params:
        1
    input:
        'results/replicate/RMSE_total.tsv'
    output:
        'results/replicate/plots/RMSE.pdf'
    run:
        R("""
        library(ggplot2)
        d <- read.delim("{input}", header=F)
        g <- ggplot(d, aes(x=V1, y=V2))
        g <- g + geom_point(aes(), size=1)
        g <- g + scale_x_log10()
        g <- g + scale_y_log10()
        g <- g + labs(x="#replicates", y="RMSE")
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot:
    params:
        1
    input:
        'results/replicate/{b}.tsv'
    output:
        'results/replicate/plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        d <- read.delim("{input[0]}", header=F)
        g <- ggplot(d, aes(x=V1, y=V2))
        g <- g + geom_point(aes())
        g <- g + geom_errorbar(aes(ymin=V2-V3, ymax=V2+V3))
        g <- g + scale_x_log10()
        g <- g + labs(x="#replicates", y="diff")
        ggsave(file="{output}", plot=g)
        """)

# rule iter_plot:
#     params:
#         1
#     input:
#         'result/replicate/{b}.tsv'
#     output:
#         'result/replicate/iter_plots/{b}.pdf'
#     run:
#         R("""
#         library(ggplot2)
#         library(scales)
#         library(plyr)
#         d <- read.delim("{input[0]}", header=T)
#         d_median <- ddply(d, .(replicates), summarize, "median_diff"=median(diff), "median_CI"=median(CI))
#         d_merged <- merge(d, d_median, by="replicates")
#         g <- ggplot(d_merged, aes(x=replicates, y=diff, group=replicates))
#         g <- g + geom_boxplot()
#         g <- g + scale_x_continuous(
#             trans = 'log2',
#             labels = trans_format('log2', math_format(2^.x)))
#         g <- g + geom_errorbar(aes(ymin=median_diff-median_CI, ymax=median_diff+median_CI), width=.2, position=position_dodge(.9), color="red")
#         ggsave(file="{output}", plot=g)
#         """)

rule boxplot:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/boxplots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        d <- read.delim("{input[0]}", header=T)
        g <- ggplot(d, aes(x=replicates, y=diff, group=replicates))
        g <- g + geom_boxplot()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot2:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_stat <- ddply(d, .(replicates), summarize, "mean_diff"=mean(diff), "sd_diff"=sd(diff), "mean_CI"=mean(CI))
        g <- ggplot(d_stat, aes(x=replicates, y=mean_diff))
        g <- g + geom_point(aes())
        g <- g + geom_errorbar(aes(ymin=mean_diff-sd_diff, ymax=mean_diff+sd_diff), width=.2, position=position_dodge(.9))
        g <- g + geom_errorbar(aes(ymin=mean_diff-mean_CI, ymax=mean_diff+mean_CI), width=.2, position=position_dodge(.9), color="red")
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot_line:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_line_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_stat <- ddply(d, .(replicates), summarize, "sd_diff"=sd(diff), "mean_CI"=mean(CI))
        d1 <- data.frame(d_stat$replicates, d_stat$sd_diff, "sd_diff")
        colnames(d1) <- c("replicates", "diff", "group")
        d2 <- data.frame(d_stat$replicates, d_stat$mean_CI, "mean_CI")
        colnames(d2) <- c("replicates", "diff", "group")
        d_merged <- rbind(d1, d2)
        g <- ggplot(d_merged, aes(x=replicates, y=diff, group=group, color=group))
        g <- g + geom_point()
        g <- g + geom_line()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + scale_y_continuous(
            trans = 'log2')
        g <- g + scale_color_hue(name="", labels=c(sd_diff="SD(diff)", mean_CI="mean(CI)"))
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot_line_ylinear:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_line_ylinear_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_stat <- ddply(d, .(replicates), summarize, "sd_diff"=sd(diff), "mean_CI"=mean(CI))
        g <- ggplot(d_stat, aes(x=replicates, y))
        g <- g + geom_point(aes(y=sd_diff), color="blue")
        g <- g + geom_line(aes(y=sd_diff), color="blue")
        g <- g + geom_point(aes(y=mean_CI), color="red")
        g <- g + geom_line(aes(y=mean_CI), color="red")
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + scale_y_continuous(
        limits=c(0,NA)
        )
        ggsave(file="{output}", plot=g)
        """)

rule iter_plot:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/iter_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_median <- ddply(d, .(replicates), summarize, "median_diff"=median(diff), "median_CI"=median(CI))
        d_merged <- merge(d, d_median, by="replicates")
        g <- ggplot(d_merged, aes(x=replicates, y=diff, group=replicates))
        g <- g + geom_boxplot()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + geom_errorbar(aes(ymin=median_diff-median_CI, ymax=median_diff+median_CI), width=.2, position=position_dodge(.9), color="red")
        ggsave(file="{output}", plot=g)
        """)

rule clean:
    shell:
        "rm -rf result log"

# install.packages("ggplot2")
# install.packages("scales")

# pdf("{output}", height=7, width=7)
# par(ps = 24)
# par(lwd = 2)
# par(mex=1.5)
# d <- read.delim("{input}", header=F)
# plot(d, type="l", lty=1, xlab="#replicates",
#   ylab="RMSE")
# dev.off()
