import sys, os, subprocess, itertools
import numpy as np
from snakemake.utils import R

dirdic = {\
"dir": "result1"\
}

# snakeconfig.yaml contains fixed parameters
configfile: "snakeconfig.yaml"

paramsdic = {\
"obs_variance":  np.arange(1.,2.,1.),\
"obs_iteration": np.arange(5,6,1),\
"dt":            np.arange(0.01,0.02,0.01),\
"duration":      np.arange(1.,2.,1.),\
"replicates":    pow(2, np.arange(0,8,1))\
}

arrayparam = {\
"iter":    np.arange(1,101,1)\
}

arrayparam_length = {\
"maxiter":       len(arrayparam["iter"])\
}

def execcommand(cmd,stdout,stderr,input=""):
    with open(stdout, "w") as outf:
        with open (stderr, "w") as errf:
            o,e = subprocess.Popen(cmd, shell=True, stdout=outf, stderr=errf, universal_newlines=True).communicate(input)
            errf.close()
        outf.close()
    return o,e

def makepath(dirdic, config):
    """
    Make base directory path based on fixed dirdic and config.
    e.g.
    dirdic = {'dir': 'result1'}
    config =
    {'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50}
        ->
    makepath(dirdic, config) =
    "result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50"
    """
    return "/".join(["/".join("{}".format(val) for val in dirdic.values()), "/".join("{}_{}".format(key,str(val).replace(" ", "_")) for (key,val) in config.items())])

def format_divide_dic(basedir, paramsdic):
    """
    Make real path directly using the lists-of-parameters dictionary.
    e.g.
    basedir = "result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50"
    alldic =
    {'obs_variance':    array([ 1.]),
     'obs_iteration':   array([5]),
     'dt':              array([ 0.01]),
     'duration':        array([ 1.]),
     'replicates':      array([1, 2]),
     'iterations':      array([1, 2])}
        ->
    format_divide_dic(basedir, alldic) =
    ["result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_1/iterations_1",
     "result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_1/iterations_2",
     "result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_2/iterations_1",
     "result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_2/iterations_2"]
    """
    return ["/".join([basedir, "/".join("{}_{}".format(*i) for i in zip(paramsdic.keys(), item))]) for item in itertools.product(*paramsdic.values())]

def format_divide_dic_file(basedir, paramsdic, filename):
    """
    Make real path directly using the lists-of-parameters dictionary.
    e.g.
    basedir = "result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50"
    alldic =
    {'obs_variance':    array([ 1.]),
     'obs_iteration':   array([5]),
     'dt':              array([ 0.01]),
     'duration':        array([ 1.]),
     'replicates':      array([1, 2]),
     'iter':            array([1, 2])}
    filename = "estimates.tsv"
        ->
    format_divide_dic_file(basedir, alldic, filename) =
    ['result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_1/iter_1/estimates.tsv',
     'result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_1/iter_2/estimates.tsv',
     'result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_2/iter_1/estimates.tsv',
     'result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_2/iter_2/estimates.tsv']
    """
    return ["/".join([basedir, "/".join("{}_{}".format(*i) for i in zip(paramsdic.keys(), item)), filename]) for item in itertools.product(*paramsdic.values())]

def _shell_format_wildcard(paramsdic):
    """
    Make shell parameter given as wildcards using the lists-of-parameters dictionary.
    e.g.
    dir_config_paramsdic =
    {'dir':                     'result1',
     'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50,
     'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
        ->
    _shell_format_wildcard(dir_config_paramsdic) =
    "dir={wildcards.dir} true_params={wildcards.true_params} initial_lower_bounds={wildcards.initial_lower_bounds} initial_upper_bounds={wildcards.initial_upper_bounds} spinup={wildcards.spinup} generation_seed={wildcards.generation_seed} trials={wildcards.trials} obs_variance={wildcards.obs_variance} obs_iteration={wildcards.obs_iteration} dt={wildcards.dt} duration={wildcards.duration} replicates={wildcards.replicates}"
    """
    return " ".join("{0}={{wildcards.{0}}}".format(key) for key in paramsdic.keys())

def shell_format_dics_run_wildcard(config_paramsdic, shellfile, out):
    """
    Make array qsub shell command given as wildcards using the lists-of-parameters dictionary.
    e.g.
    dir_config_paramsdic =
    {'dir':                     'result1',
     'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50,
     'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
    shellfile = "./hoge.sh"
    out = "outfile"
        ->
    shell_format_dics_run_wildcard(dir_config_paramsdic, shellfile, out) =
    "dir={wildcards.dir} true_params={wildcards.true_params} initial_lower_bounds={wildcards.initial_lower_bounds} initial_upper_bounds={wildcards.initial_upper_bounds} spinup={wildcards.spinup} generation_seed={wildcards.generation_seed} trials={wildcards.trials} obs_variance={wildcards.obs_variance} obs_iteration={wildcards.obs_iteration} dt={wildcards.dt} duration={wildcards.duration} replicates={wildcards.replicates} qsub -sync y -t 1:2:1 ./hoge.sh outfile"
    """
    return _shell_format_wildcard(config_paramsdic) + " qsub -sync y -t 1:{maxiter}:1 ./".format(**arrayparam_length) + shellfile + " " + out

def format_dic_wildcard(dirdic, config_paramsdic):
    """
    Make wildcarded path directly using the lists-of-parameters dictionary.
    e.g.
    dirdic =
    {'dir': 'result1'}
    config_paramsdic =
    {'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50,
     'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
        ->
    format_dic_wildcard(dirdic, config_paramsdic) =
    "{dir}/true_params_{true_params}/initial_lower_bounds_{initial_lower_bounds}/initial_upper_bounds_{initial_upper_bounds}/spinup_{spinup}/generation_seed_{generation_seed}/trials_{trials}/obs_variance_{obs_variance}/obs_iteration_{obs_iteration}/dt_{dt}/duration_{duration}/replicates_{replicates}"
    """
    return "/".join(["/".join("{{{}}}".format(key) for key in dirdic), "/".join("{0}_{{{0}}}".format(key) for key in config_paramsdic.keys())]) # curly braces can be escaped by doubling

def format_dic_with_wildcard_prefix(dirdic, config_paramsdic):
    """
    Make wildcarded path directly using the lists-of-parameters dictionary.
    The prefix "wildcards" is added.
    e.g.
    dirdic =
    {'dir': 'result1'}
    config_paramsdic =
    {'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50,
     'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
        ->
    format_dic_with_wildcard_prefix(dirdic, config_paramsdic) =
    "{wildcards.dir}/true_params_{wildcards.true_params}/initial_lower_bounds_{wildcards.initial_lower_bounds}/initial_upper_bounds_{wildcards.initial_upper_bounds}/spinup_{wildcards.spinup}/generation_seed_{wildcards.generation_seed}/trials_{wildcards.trials}/obs_variance_{wildcards.obs_variance}/obs_iteration_{wildcards.obs_iteration}/dt_{wildcards.dt}/duration_{wildcards.duration}/replicates_{wildcards.replicates}"
    """
    return "/".join(["/".join("{{wildcards.{}}}".format(key) for key in dirdic), "/".join("{0}_{{wildcards.{0}}}".format(key) for key in config_paramsdic.keys())]) # curly braces can be escaped by doubling


# API functions
def wildcardparams_expandarrayparams(dirdic, config, paramsdic, arrayparam):
    """
    Output files for the array job rule.
    e.g.
    dirdic =
    {'dir': 'result1'}
    config =
    {'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50}
    paramsdic =
    {'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
    arrayparam =
    {'iterations': array([1, 2])}
        ->
    wildcardparams_expandarrayparams(dirdic, config, paramsdic, arrayparam) =
    ['{dir}/true_params_{true_params}/initial_lower_bounds_{initial_lower_bounds}/initial_upper_bounds_{initial_upper_bounds}/spinup_{spinup}/generation_seed_{generation_seed}/trials_{trials}/obs_variance_{obs_variance}/obs_iteration_{obs_iteration}/dt_{dt}/duration_{duration}/replicates_{replicates}/iterations_1',
     '{dir}/true_params_{true_params}/initial_lower_bounds_{initial_lower_bounds}/initial_upper_bounds_{initial_upper_bounds}/spinup_{spinup}/generation_seed_{generation_seed}/trials_{trials}/obs_variance_{obs_variance}/obs_iteration_{obs_iteration}/dt_{dt}/duration_{duration}/replicates_{replicates}/iterations_2']
    """
    return format_divide_dic(format_dic_wildcard(dirdic, dict(config, **paramsdic)), arrayparam)

def make_array_shellcommand(dirdic, config, paramsdic, shellfile):
    """
    Make shellcommand for the array job rule.
    e.g.
    dirdic =
    {'dir': 'result1'}
    config =
    {'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50}
    paramsdic =
    {'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
        ->
    make_array_shellcommand(dirdic, config, paramsdic, shellfile) =
    "dir={wildcards.dir} true_params={wildcards.true_params} initial_lower_bounds={wildcards.initial_lower_bounds} initial_upper_bounds={wildcards.initial_upper_bounds} spinup={wildcards.spinup} generation_seed={wildcards.generation_seed} trials={wildcards.trials} obs_variance={wildcards.obs_variance} obs_iteration={wildcards.obs_iteration} dt={wildcards.dt} duration={wildcards.duration} replicates={wildcards.replicates} qsub -sync y -t 1:2:1 ./array_qsub_experiment.sh {wildcards.dir}/true_params_{wildcards.true_params}/initial_lower_bounds_{wildcards.initial_lower_bounds}/initial_upper_bounds_{wildcards.initial_upper_bounds}/spinup_{wildcards.spinup}/generation_seed_{wildcards.generation_seed}/trials_{wildcards.trials}/obs_variance_{wildcards.obs_variance}/obs_iteration_{wildcards.obs_iteration}/dt_{wildcards.dt}/duration_{wildcards.duration}/replicates_{wildcards.replicates}"
    """
    config_paramsdic = dict(config, **paramsdic)
    dir_config_paramsdic = dict(dirdic, **config_paramsdic)
    return shell_format_dics_run_wildcard(dir_config_paramsdic, shellfile, format_dic_with_wildcard_prefix(dirdic, config_paramsdic))

def make_all_output_filenames(dirdic, config, paramsdic, arrayparam, filename):
    """
    Make all output filenames.
    e.g.
    dirdic =
    {'dir': 'result1'}
    config =
    {'true_params':             '8.0 1.0',
     'initial_lower_bounds':    '-10.0 -10.0 -10.0 -10.0 -10.0 0.0 0.0',
     'initial_upper_bounds':    '10.0 10.0 10.0 10.0 10.0 16.0 2.0',
     'spinup':                  73.0,
     'generation_seed':         0,
     'trials':                  50}
    paramsdic =
    {'obs_variance':            array([ 1.]),
     'obs_iteration':           array([5]),
     'dt':                      array([ 0.01]),
     'duration':                array([ 1.]),
     'replicates':              array([1, 2])}
    arrayparam =
    {'iterations': array([1, 2])}
    filename = "estimates.tsv"
        ->
    make_all_output_filenames(dirdic, config, paramsdic, arrayparam, filename) =
    ['result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_1/iter_1/estimates.tsv',
     'result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_1/iter_2/estimates.tsv',
     'result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_2/iter_1/estimates.tsv',
     'result1/true_params_8.0_1.0/initial_lower_bounds_-10.0_-10.0_-10.0_-10.0_-10.0_0.0_0.0/initial_upper_bounds_10.0_10.0_10.0_10.0_10.0_16.0_2.0/spinup_73.0/generation_seed_0/trials_50/obs_variance_1.0/obs_iteration_5/dt_0.01/duration_1.0/replicates_2/iter_2/estimates.tsv']
    """
    return format_divide_dic_file(makepath(dirdic, config), dict(paramsdic, **arrayparam), filename)


rule all:
    input:
        make_all_output_filenames(dirdic, config, paramsdic, arrayparam, "estimates.tsv")
        # expand('results/replicate/plots/{b}.pdf', b=paramsdic["dims"]),
        # 'results/replicate/plots/RMSE.pdf'
        # expand('result/replicate/iter_plots/{b}.pdf', b=paramsdic["dims"])
        # expand('result/replicate/boxplots/{b}.pdf', b=paramsdic["dims"]),
        # expand('result/replicate/CI_boxplots/{b}.pdf', b=paramsdic["dims"]),
        # expand('result/replicate/CI_boxplots_ylog/{b}.pdf', b=paramsdic["dims"]),
        # expand('result/replicate/CI_plots/{b}.pdf', b=paramsdic["dims"]),
        # expand('result/replicate/CI_line_plots/{b}.pdf', b=paramsdic["dims"]),
        # expand('result/replicate/CI_line_ylinear_plots/{b}.pdf', b=paramsdic["dims"])
        # 'results/replicate/RMSE_total.tsv',
        # 'results/replicate/CI_total.tsv'
        # expand('results/replicate/CI/{param}.tsv', param=replicates)

rule test_makepath:
    run:
        print(dirdic)
        print(config)
        print(makepath(dirdic, config))

rule test_format_divide_dic:
    run:
        basedir = makepath(dirdic, config)
        alldic = dict(paramsdic, **arrayparam)
        print(basedir)
        print(alldic)
        print(format_divide_dic(basedir, alldic))
        for item in format_divide_dic(basedir, alldic):
            print(item)

rule test_format_divide_dic_file:
    run:
        basedir = makepath(dirdic, config)
        alldic = dict(paramsdic, **arrayparam)
        print(basedir)
        print(alldic)
        print(format_divide_dic_file(basedir, alldic, "estimates.tsv"))
        for item in format_divide_dic_file(basedir, alldic, "estimates.tsv"):
            print(item)

rule test__shell_format_wildcard:
    run:
        dir_config_paramsdic = dict(dict(dirdic, **config), **paramsdic)
        print(dir_config_paramsdic)
        print(_shell_format_wildcard(dir_config_paramsdic))

rule test_shell_format_dics_run_wildcard:
    run:
        dir_config_paramsdic = dict(dict(dirdic, **config), **paramsdic)
        print(dir_config_paramsdic)
        print(shell_format_dics_run_wildcard(dir_config_paramsdic, "hoge.sh", "outfile"))

rule test_format_dic_wildcard:
    run:
        config_paramsdic = dict(config, **paramsdic)
        print(dirdic)
        print(config_paramsdic)
        print(format_dic_wildcard(dirdic, config_paramsdic))

rule test_format_dic_with_wildcard_prefix:
    run:
        config_paramsdic = dict(config, **paramsdic)
        print(dirdic)
        print(config_paramsdic)
        print(format_dic_with_wildcard_prefix(dirdic, config_paramsdic))

rule test_wildcardparams_expandarrayparams:
    run:
        print(dirdic)
        print(config)
        print(paramsdic)
        print(arrayparam)
        print(wildcardparams_expandarrayparams(dirdic, config, paramsdic, arrayparam))

rule test_make_array_shellcommand:
    run:
        print(dirdic)
        print(config)
        print(paramsdic)
        print(make_array_shellcommand(dirdic, config, paramsdic, "array_qsub_experiment.sh"))

rule test_make_all_output_filenames:
    run:
        print(dirdic)
        print(config)
        print(paramsdic)
        print(arrayparam)
        print(make_all_output_filenames(dirdic, config, paramsdic, arrayparam, "estimates.tsv"))

rule test_experiment:
    run:
        print("output:")
        for item in wildcardparams_expandarrayparams(dirdic, config, paramsdic, arrayparam):
            print(item)
        print("shell command:")
        print(make_array_shellcommand(dirdic, config, paramsdic, "array_qsub_experiment.sh"))

rule build:
    params:
        1
    input:
        'experiment_arguments.jl'
    output:
        'builddir/experiment_arguments',
        'builddir/experiment_arguments.so',
        'builddir/experiment_arguments.o'
    shell:
        "julia ~/.julia/v0.6/PackageCompiler/juliac.jl -vae experiment_arguments.jl"

rule experiment:
    params:
        1
    input:
        'builddir/experiment_arguments'
    output:
        wildcardparams_expandarrayparams(dirdic, config, paramsdic, arrayparam)
    run:
        shell(make_array_shellcommand(dirdic, config, paramsdic, "array_qsub_experiment.sh"))

# rulename should not be begin by numbers

# rule RMSE_totaling:
#     params:
#         1
#     input:
#         expand('results/replicate_{param}/RMSE', param=replicates)
#     output:
#         'results/replicate/RMSE_total.tsv'
#     log:
#         'log/replicate/RMSE'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate_' + i + '/RMSE', 'r') as infile:
#                     outf.write("%s\t%s\n" % (i, infile.readline().rstrip('\n')))
#                 infile.close()
#             outf.close()

# rule totaling:
#     params:
#         1
#     input:
#         ['results/replicate_'+ a + '/{b}.tsv' for a in replicates]
#     output:
#         'results/replicate/{b}.tsv'
#     log:
#         'log/replicate/dims/{b}'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate_' + i + '/' + expand('{b}', b={wildcards.b})[0] + '.tsv', 'r') as infile:
#                     outf.write("%s\t%s" % (i, infile.readline()))
#                 infile.close()
#             outf.close()

# rule totaling_iter:
#     params:
#         1
#     input:
#         ['result/replicate_{a}/iter_' + it + '/{b}.tsv' for it in iterations]
#     output:
#         'result/replicate_{a}/{b}.tsv'
#     log:
#         'log/replicate_{a}/dims/{b}'
#     run:
#         execcommand(expand("""
#         cat result/replicate_{a}/iter_*/{b}.tsv | sed "s/^/{a}$(printf '\t')/g"
#         """, a={wildcards.a}, b={wildcards.b}), output[0], log[0])
#
# rule totaling_replicate:
#     params:
#         1
#     input:
#         ['result/replicate_' + a + '/{b}.tsv' for a in replicates]
#     output:
#         'result/replicate/{b}.tsv'
#     log:
#         'log/replicate/dims/{b}'
#     run:
#         execcommand(expand("cat result/replicate_*/{b}.tsv", b={wildcards.b}), output[0], log[0])

# rule totaling_replicate:
#     params:
#         1
#     input:
#         ['result/replicate_' + str(a) + '/iter_' + str(it) + '/{b}.tsv' for a in paramsdic["replicates"] for it in paramsdic["iterations"]]
#     output:
#         'result/replicate/{b}.tsv'
#     log:
#         'log/replicate/dims/{b}'
#     run:
#         with open(output[0],'w') as outf:
#             outf.write("replicates\tdiff\tCI\n")
#             for i in replicates:
#                 for j in iterations:
#                     with open('result/replicate_' + i + '/iter_' + j + expand('/{b}', b={wildcards.b})[0] + '.tsv', 'r') as infile:
#                         outf.write('%s\t%s\n' % (i, infile.readline().rstrip('\n')))
#                         infile.close()
#             outf.close()

# rule diff_totaling:
#     params:
#         1
#     input:
#         expand('results/replicate/diff/{param}.tsv', param=replicates)
#     output:
#         'results/replicate/diff_total.tsv'
#     log:
#         'log/replicate/stderr_diff'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate/diff/' + i + '.tsv', 'r') as infile:
#                     outf.write("%s\t%s\n" % (i, infile.readline().rstrip('\n')))
#                 infile.close()
#             outf.close()
#
# rule CI_totaling:
#     params:
#         1
#     input:
#         expand('results/replicate/CI/{param}.tsv', param=replicates)
#     output:
#         'results/replicate/CI_total.tsv'
#     log:
#         'log/replicate/stderr_CI'
#     run:
#         with open(output[0],'w') as outf:
#             for i in replicates:
#                 with open('results/replicate/CI/' + i + '.tsv', 'r') as infile:
#                     outf.write("%s\t%s\n" % (i, infile.readline().rstrip('\n')))
#                 infile.close()
#             outf.close()

# rule RMSE_plot:
#     params:
#         1
#     input:
#         'results/replicate/RMSE_total.tsv'
#     output:
#         'results/replicate/plots/RMSE.pdf'
#     run:
#         R("""
#         library(ggplot2)
#         d <- read.delim("{input}", header=F)
#         g <- ggplot(d, aes(x=V1, y=V2))
#         g <- g + geom_point(aes(), size=1)
#         g <- g + scale_x_log10()
#         g <- g + scale_y_log10()
#         g <- g + labs(x="#replicates", y="RMSE")
#         ggsave(file="{output}", plot=g)
#         """)
#
# rule CI_plot:
#     params:
#         1
#     input:
#         'results/replicate/{b}.tsv'
#     output:
#         'results/replicate/plots/{b}.pdf'
#     run:
#         R("""
#         library(ggplot2)
#         d <- read.delim("{input[0]}", header=F)
#         g <- ggplot(d, aes(x=V1, y=V2))
#         g <- g + geom_point(aes())
#         g <- g + geom_errorbar(aes(ymin=V2-V3, ymax=V2+V3))
#         g <- g + scale_x_log10()
#         g <- g + labs(x="#replicates", y="diff")
#         ggsave(file="{output}", plot=g)
#         """)

rule boxplot:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/boxplots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        d <- read.delim("{input[0]}", header=T)
        g <- ggplot(d, aes(x=replicates, y=diff, group=replicates))
        g <- g + geom_boxplot()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        ggsave(file="{output}", plot=g)
        """)

rule CI_boxplot:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_boxplots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        d <- read.delim("{input[0]}", header=T)
        g <- ggplot(d, aes(x=replicates, y=CI, group=replicates))
        g <- g + geom_boxplot()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + scale_y_continuous(
            limits=c(0,NA)
            )
        ggsave(file="{output}", plot=g)
        """)

rule CI_boxplot_ylog:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_boxplots_ylog/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        d <- read.delim("{input[0]}", header=T)
        g <- ggplot(d, aes(x=replicates, y=CI, group=replicates))
        g <- g + geom_boxplot()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + scale_y_continuous(
            trans = 'log2')
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot2:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_stat <- ddply(d, .(replicates), summarize, "mean_diff"=mean(diff), "sd_diff"=sd(diff), "mean_CI"=mean(CI))
        g <- ggplot(d_stat, aes(x=replicates, y=mean_diff))
        g <- g + geom_point(aes())
        g <- g + geom_errorbar(aes(ymin=mean_diff-sd_diff, ymax=mean_diff+sd_diff), width=.2, position=position_dodge(.9))
        g <- g + geom_errorbar(aes(ymin=mean_diff-mean_CI, ymax=mean_diff+mean_CI), width=.2, position=position_dodge(.9), color="red")
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot_line:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_line_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_stat <- ddply(d, .(replicates), summarize, "sd_diff"=sd(diff), "mean_CI"=mean(CI))
        d1 <- data.frame(d_stat$replicates, d_stat$sd_diff, "sd_diff")
        colnames(d1) <- c("replicates", "diff", "group")
        d2 <- data.frame(d_stat$replicates, d_stat$mean_CI, "mean_CI")
        colnames(d2) <- c("replicates", "diff", "group")
        d_merged <- rbind(d1, d2)
        g <- ggplot(d_merged, aes(x=replicates, y=diff, group=group, color=group))
        g <- g + geom_point()
        g <- g + geom_line()
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + scale_y_continuous(
            trans = 'log2')
        g <- g + scale_color_hue(name="", labels=c(sd_diff="SD(diff)", mean_CI="mean(CI)"))
        ggsave(file="{output}", plot=g)
        """)

rule CI_plot_line_ylinear:
    params:
        1
    input:
        'result/replicate/{b}.tsv'
    output:
        'result/replicate/CI_line_ylinear_plots/{b}.pdf'
    run:
        R("""
        library(ggplot2)
        library(scales)
        library(plyr)
        d <- read.delim("{input[0]}", header=T)
        d_stat <- ddply(d, .(replicates), summarize, "sd_diff"=sd(diff), "mean_CI"=mean(CI))
        g <- ggplot(d_stat, aes(x=replicates, y))
        g <- g + geom_point(aes(y=sd_diff), color="blue")
        g <- g + geom_line(aes(y=sd_diff), color="blue")
        g <- g + geom_point(aes(y=mean_CI), color="red")
        g <- g + geom_line(aes(y=mean_CI), color="red")
        g <- g + scale_x_continuous(
            trans = 'log2',
            labels = trans_format('log2', math_format(2^.x)))
        g <- g + scale_y_continuous(
        limits=c(0,NA)
        )
        ggsave(file="{output}", plot=g)
        """)

# rule iter_plot:
#     params:
#         1
#     input:
#         'result/replicate/{b}.tsv'
#     output:
#         'result/replicate/iter_plots/{b}.pdf'
#     run:
#         R("""
#         library(ggplot2)
#         library(scales)
#         library(plyr)
#         d <- read.delim("{input[0]}", header=T)
#         d_median <- ddply(d, .(replicates), summarize, "median_diff"=median(diff), "median_CI"=median(CI))
#         d_merged <- merge(d, d_median, by="replicates")
#         g <- ggplot(d_merged, aes(x=replicates, y=diff, group=replicates))
#         g <- g + geom_boxplot()
#         g <- g + scale_x_continuous(
#             trans = 'log2',
#             labels = trans_format('log2', math_format(2^.x)))
#         g <- g + geom_errorbar(aes(ymin=median_diff-median_CI, ymax=median_diff+median_CI), width=.2, position=position_dodge(.9), color="red")
#         ggsave(file="{output}", plot=g)
#         """)

rule clean:
    shell:
        "rm -rf result log"
